# Generated from PPCDSALVC.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


import pprint
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\63")
        buf.write("\u0133\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36\7\36\u00eb")
        buf.write("\n\36\f\36\16\36\u00ee\13\36\3\36\5\36\u00f1\n\36\3\37")
        buf.write("\7\37\u00f4\n\37\f\37\16\37\u00f7\13\37\3\37\3\37\6\37")
        buf.write("\u00fb\n\37\r\37\16\37\u00fc\3 \3 \3 \3 \3!\3!\3\"\3\"")
        buf.write("\3#\3#\3$\3$\3%\3%\3%\5%\u010e\n%\3&\3&\3\'\3\'\3(\3(")
        buf.write("\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3")
        buf.write("\61\3\61\7\61\u0128\n\61\f\61\16\61\u012b\13\61\3\62\6")
        buf.write("\62\u012e\n\62\r\62\16\62\u012f\3\62\3\62\2\2\63\3\3\5")
        buf.write("\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33")
        buf.write("\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32")
        buf.write("\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U")
        buf.write(",W-Y.[/]\60_\61a\62c\63\3\2\t\3\2\63;\3\2\62;\3\2\62\62")
        buf.write("\4\2>>@@\4\2C\\c|\5\2\62;C\\c|\5\2\13\f\17\17\"\"\2\u0139")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2")
        buf.write("\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\3e\3\2\2\2\5m\3")
        buf.write("\2\2\2\7r\3\2\2\2\tw\3\2\2\2\13~\3\2\2\2\r\u0083\3\2\2")
        buf.write("\2\17\u0087\3\2\2\2\21\u008b\3\2\2\2\23\u0091\3\2\2\2")
        buf.write("\25\u0096\3\2\2\2\27\u009c\3\2\2\2\31\u00a3\3\2\2\2\33")
        buf.write("\u00ab\3\2\2\2\35\u00b1\3\2\2\2\37\u00b5\3\2\2\2!\u00bb")
        buf.write("\3\2\2\2#\u00c1\3\2\2\2%\u00c3\3\2\2\2\'\u00c5\3\2\2\2")
        buf.write(")\u00c8\3\2\2\2+\u00cb\3\2\2\2-\u00ce\3\2\2\2/\u00d1\3")
        buf.write("\2\2\2\61\u00d4\3\2\2\2\63\u00d7\3\2\2\2\65\u00da\3\2")
        buf.write("\2\2\67\u00e1\3\2\2\29\u00e6\3\2\2\2;\u00f0\3\2\2\2=\u00f5")
        buf.write("\3\2\2\2?\u00fe\3\2\2\2A\u0102\3\2\2\2C\u0104\3\2\2\2")
        buf.write("E\u0106\3\2\2\2G\u0108\3\2\2\2I\u010d\3\2\2\2K\u010f\3")
        buf.write("\2\2\2M\u0111\3\2\2\2O\u0113\3\2\2\2Q\u0115\3\2\2\2S\u0117")
        buf.write("\3\2\2\2U\u0119\3\2\2\2W\u011b\3\2\2\2Y\u011d\3\2\2\2")
        buf.write("[\u011f\3\2\2\2]\u0121\3\2\2\2_\u0123\3\2\2\2a\u0125\3")
        buf.write("\2\2\2c\u012d\3\2\2\2ef\7r\2\2fg\7t\2\2gh\7q\2\2hi\7i")
        buf.write("\2\2ij\7t\2\2jk\7c\2\2kl\7o\2\2l\4\3\2\2\2mn\7o\2\2no")
        buf.write("\7c\2\2op\7k\2\2pq\7p\2\2q\6\3\2\2\2rs\7h\2\2st\7w\2\2")
        buf.write("tu\7p\2\2uv\7e\2\2v\b\3\2\2\2wx\7t\2\2xy\7g\2\2yz\7v\2")
        buf.write("\2z{\7w\2\2{|\7t\2\2|}\7p\2\2}\n\3\2\2\2~\177\7x\2\2\177")
        buf.write("\u0080\7q\2\2\u0080\u0081\7k\2\2\u0081\u0082\7f\2\2\u0082")
        buf.write("\f\3\2\2\2\u0083\u0084\7x\2\2\u0084\u0085\7c\2\2\u0085")
        buf.write("\u0086\7t\2\2\u0086\16\3\2\2\2\u0087\u0088\7k\2\2\u0088")
        buf.write("\u0089\7p\2\2\u0089\u008a\7v\2\2\u008a\20\3\2\2\2\u008b")
        buf.write("\u008c\7h\2\2\u008c\u008d\7n\2\2\u008d\u008e\7q\2\2\u008e")
        buf.write("\u008f\7c\2\2\u008f\u0090\7v\2\2\u0090\22\3\2\2\2\u0091")
        buf.write("\u0092\7e\2\2\u0092\u0093\7j\2\2\u0093\u0094\7c\2\2\u0094")
        buf.write("\u0095\7t\2\2\u0095\24\3\2\2\2\u0096\u0097\7e\2\2\u0097")
        buf.write("\u0098\7n\2\2\u0098\u0099\7c\2\2\u0099\u009a\7u\2\2\u009a")
        buf.write("\u009b\7u\2\2\u009b\26\3\2\2\2\u009c\u009d\7r\2\2\u009d")
        buf.write("\u009e\7w\2\2\u009e\u009f\7d\2\2\u009f\u00a0\7n\2\2\u00a0")
        buf.write("\u00a1\7k\2\2\u00a1\u00a2\7e\2\2\u00a2\30\3\2\2\2\u00a3")
        buf.write("\u00a4\7r\2\2\u00a4\u00a5\7t\2\2\u00a5\u00a6\7k\2\2\u00a6")
        buf.write("\u00a7\7x\2\2\u00a7\u00a8\7c\2\2\u00a8\u00a9\7v\2\2\u00a9")
        buf.write("\u00aa\7g\2\2\u00aa\32\3\2\2\2\u00ab\u00ac\7y\2\2\u00ac")
        buf.write("\u00ad\7j\2\2\u00ad\u00ae\7k\2\2\u00ae\u00af\7n\2\2\u00af")
        buf.write("\u00b0\7g\2\2\u00b0\34\3\2\2\2\u00b1\u00b2\7h\2\2\u00b2")
        buf.write("\u00b3\7q\2\2\u00b3\u00b4\7t\2\2\u00b4\36\3\2\2\2\u00b5")
        buf.write("\u00b6\7r\2\2\u00b6\u00b7\7t\2\2\u00b7\u00b8\7k\2\2\u00b8")
        buf.write("\u00b9\7p\2\2\u00b9\u00ba\7v\2\2\u00ba \3\2\2\2\u00bb")
        buf.write("\u00bc\7k\2\2\u00bc\u00bd\7p\2\2\u00bd\u00be\7r\2\2\u00be")
        buf.write("\u00bf\7w\2\2\u00bf\u00c0\7v\2\2\u00c0\"\3\2\2\2\u00c1")
        buf.write("\u00c2\7>\2\2\u00c2$\3\2\2\2\u00c3\u00c4\7@\2\2\u00c4")
        buf.write("&\3\2\2\2\u00c5\u00c6\7#\2\2\u00c6\u00c7\7?\2\2\u00c7")
        buf.write("(\3\2\2\2\u00c8\u00c9\7>\2\2\u00c9\u00ca\7?\2\2\u00ca")
        buf.write("*\3\2\2\2\u00cb\u00cc\7@\2\2\u00cc\u00cd\7?\2\2\u00cd")
        buf.write(",\3\2\2\2\u00ce\u00cf\7?\2\2\u00cf\u00d0\7?\2\2\u00d0")
        buf.write(".\3\2\2\2\u00d1\u00d2\7(\2\2\u00d2\u00d3\7(\2\2\u00d3")
        buf.write("\60\3\2\2\2\u00d4\u00d5\7~\2\2\u00d5\u00d6\7~\2\2\u00d6")
        buf.write("\62\3\2\2\2\u00d7\u00d8\7k\2\2\u00d8\u00d9\7h\2\2\u00d9")
        buf.write("\64\3\2\2\2\u00da\u00db\7g\2\2\u00db\u00dc\7n\2\2\u00dc")
        buf.write("\u00dd\7u\2\2\u00dd\u00de\7g\2\2\u00de\u00df\7k\2\2\u00df")
        buf.write("\u00e0\7h\2\2\u00e0\66\3\2\2\2\u00e1\u00e2\7g\2\2\u00e2")
        buf.write("\u00e3\7n\2\2\u00e3\u00e4\7u\2\2\u00e4\u00e5\7g\2\2\u00e5")
        buf.write("8\3\2\2\2\u00e6\u00e7\7#\2\2\u00e7:\3\2\2\2\u00e8\u00ec")
        buf.write("\t\2\2\2\u00e9\u00eb\t\3\2\2\u00ea\u00e9\3\2\2\2\u00eb")
        buf.write("\u00ee\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ec\u00ed\3\2\2\2")
        buf.write("\u00ed\u00f1\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ef\u00f1\t")
        buf.write("\4\2\2\u00f0\u00e8\3\2\2\2\u00f0\u00ef\3\2\2\2\u00f1<")
        buf.write("\3\2\2\2\u00f2\u00f4\t\3\2\2\u00f3\u00f2\3\2\2\2\u00f4")
        buf.write("\u00f7\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5\u00f6\3\2\2\2")
        buf.write("\u00f6\u00f8\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f8\u00fa\7")
        buf.write("\60\2\2\u00f9\u00fb\t\3\2\2\u00fa\u00f9\3\2\2\2\u00fb")
        buf.write("\u00fc\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fc\u00fd\3\2\2\2")
        buf.write("\u00fd>\3\2\2\2\u00fe\u00ff\7)\2\2\u00ff\u0100\13\2\2")
        buf.write("\2\u0100\u0101\7)\2\2\u0101@\3\2\2\2\u0102\u0103\7-\2")
        buf.write("\2\u0103B\3\2\2\2\u0104\u0105\7/\2\2\u0105D\3\2\2\2\u0106")
        buf.write("\u0107\7,\2\2\u0107F\3\2\2\2\u0108\u0109\7\61\2\2\u0109")
        buf.write("H\3\2\2\2\u010a\u010e\t\5\2\2\u010b\u010c\7>\2\2\u010c")
        buf.write("\u010e\7@\2\2\u010d\u010a\3\2\2\2\u010d\u010b\3\2\2\2")
        buf.write("\u010eJ\3\2\2\2\u010f\u0110\7?\2\2\u0110L\3\2\2\2\u0111")
        buf.write("\u0112\7<\2\2\u0112N\3\2\2\2\u0113\u0114\7]\2\2\u0114")
        buf.write("P\3\2\2\2\u0115\u0116\7_\2\2\u0116R\3\2\2\2\u0117\u0118")
        buf.write("\7*\2\2\u0118T\3\2\2\2\u0119\u011a\7+\2\2\u011aV\3\2\2")
        buf.write("\2\u011b\u011c\7}\2\2\u011cX\3\2\2\2\u011d\u011e\7\177")
        buf.write("\2\2\u011eZ\3\2\2\2\u011f\u0120\7\60\2\2\u0120\\\3\2\2")
        buf.write("\2\u0121\u0122\7.\2\2\u0122^\3\2\2\2\u0123\u0124\7=\2")
        buf.write("\2\u0124`\3\2\2\2\u0125\u0129\t\6\2\2\u0126\u0128\t\7")
        buf.write("\2\2\u0127\u0126\3\2\2\2\u0128\u012b\3\2\2\2\u0129\u0127")
        buf.write("\3\2\2\2\u0129\u012a\3\2\2\2\u012ab\3\2\2\2\u012b\u0129")
        buf.write("\3\2\2\2\u012c\u012e\t\b\2\2\u012d\u012c\3\2\2\2\u012e")
        buf.write("\u012f\3\2\2\2\u012f\u012d\3\2\2\2\u012f\u0130\3\2\2\2")
        buf.write("\u0130\u0131\3\2\2\2\u0131\u0132\b\62\2\2\u0132d\3\2\2")
        buf.write("\2\n\2\u00ec\u00f0\u00f5\u00fc\u010d\u0129\u012f\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class PPCDSALVCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    INT = 29
    FLOAT = 30
    CHAR = 31
    MAS = 32
    MENOS = 33
    MULT = 34
    DIV = 35
    CMP = 36
    IGUAL = 37
    PP = 38
    LB = 39
    RB = 40
    PA = 41
    PC = 42
    LLA = 43
    LLC = 44
    PUNTO = 45
    COMA = 46
    PUNTOCOMA = 47
    ID = 48
    IGN = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'main'", "'func'", "'return'", "'void'", "'var'", 
            "'int'", "'float'", "'char'", "'class'", "'public'", "'private'", 
            "'while'", "'for'", "'print'", "'input'", "'<'", "'>'", "'!='", 
            "'<='", "'>='", "'=='", "'&&'", "'||'", "'if'", "'elseif'", 
            "'else'", "'!'", "'+'", "'-'", "'*'", "'/'", "'='", "':'", "'['", 
            "']'", "'('", "')'", "'{'", "'}'", "'.'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "CHAR", "MAS", "MENOS", "MULT", "DIV", "CMP", 
            "IGUAL", "PP", "LB", "RB", "PA", "PC", "LLA", "LLC", "PUNTO", 
            "COMA", "PUNTOCOMA", "ID", "IGN" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "INT", "FLOAT", "CHAR", "MAS", "MENOS", 
                  "MULT", "DIV", "CMP", "IGUAL", "PP", "LB", "RB", "PA", 
                  "PC", "LLA", "LLC", "PUNTO", "COMA", "PUNTOCOMA", "ID", 
                  "IGN" ]

    grammarFileName = "PPCDSALVC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


