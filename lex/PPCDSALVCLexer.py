# Generated from PPCDSALVC.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


import pprint
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61")
        buf.write("\u012e\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33")
        buf.write("\u00e2\n\33\3\34\3\34\7\34\u00e6\n\34\f\34\16\34\u00e9")
        buf.write("\13\34\3\34\5\34\u00ec\n\34\3\35\7\35\u00ef\n\35\f\35")
        buf.write("\16\35\u00f2\13\35\3\35\3\35\6\35\u00f6\n\35\r\35\16\35")
        buf.write("\u00f7\3\36\3\36\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3")
        buf.write("\"\3#\3#\3#\5#\u0109\n#\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3")
        buf.write("(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\7/\u0123\n")
        buf.write("/\f/\16/\u0126\13/\3\60\6\60\u0129\n\60\r\60\16\60\u012a")
        buf.write("\3\60\3\60\2\2\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23")
        buf.write("\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25")
        buf.write(")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A")
        buf.write("\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61\3\2\t\3\2\63;\3")
        buf.write("\2\62;\3\2\62\62\4\2>>@@\4\2C\\c|\5\2\62;C\\c|\5\2\13")
        buf.write("\f\17\17\"\"\2\u0136\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2")
        buf.write("\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2")
        buf.write("\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31")
        buf.write("\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2")
        buf.write("\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3")
        buf.write("\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2")
        buf.write("\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3")
        buf.write("\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G")
        buf.write("\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2")
        buf.write("Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2")
        buf.write("\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\3a\3\2\2\2\5i\3\2\2")
        buf.write("\2\7n\3\2\2\2\ts\3\2\2\2\13z\3\2\2\2\r\177\3\2\2\2\17")
        buf.write("\u0083\3\2\2\2\21\u0089\3\2\2\2\23\u0090\3\2\2\2\25\u0098")
        buf.write("\3\2\2\2\27\u009e\3\2\2\2\31\u00a2\3\2\2\2\33\u00a8\3")
        buf.write("\2\2\2\35\u00ae\3\2\2\2\37\u00b0\3\2\2\2!\u00b2\3\2\2")
        buf.write("\2#\u00b5\3\2\2\2%\u00b8\3\2\2\2\'\u00bb\3\2\2\2)\u00be")
        buf.write("\3\2\2\2+\u00c1\3\2\2\2-\u00c4\3\2\2\2/\u00c7\3\2\2\2")
        buf.write("\61\u00ce\3\2\2\2\63\u00d3\3\2\2\2\65\u00e1\3\2\2\2\67")
        buf.write("\u00eb\3\2\2\29\u00f0\3\2\2\2;\u00f9\3\2\2\2=\u00fd\3")
        buf.write("\2\2\2?\u00ff\3\2\2\2A\u0101\3\2\2\2C\u0103\3\2\2\2E\u0108")
        buf.write("\3\2\2\2G\u010a\3\2\2\2I\u010c\3\2\2\2K\u010e\3\2\2\2")
        buf.write("M\u0110\3\2\2\2O\u0112\3\2\2\2Q\u0114\3\2\2\2S\u0116\3")
        buf.write("\2\2\2U\u0118\3\2\2\2W\u011a\3\2\2\2Y\u011c\3\2\2\2[\u011e")
        buf.write("\3\2\2\2]\u0120\3\2\2\2_\u0128\3\2\2\2ab\7r\2\2bc\7t\2")
        buf.write("\2cd\7q\2\2de\7i\2\2ef\7t\2\2fg\7c\2\2gh\7o\2\2h\4\3\2")
        buf.write("\2\2ij\7o\2\2jk\7c\2\2kl\7k\2\2lm\7p\2\2m\6\3\2\2\2no")
        buf.write("\7h\2\2op\7w\2\2pq\7p\2\2qr\7e\2\2r\b\3\2\2\2st\7t\2\2")
        buf.write("tu\7g\2\2uv\7v\2\2vw\7w\2\2wx\7t\2\2xy\7p\2\2y\n\3\2\2")
        buf.write("\2z{\7x\2\2{|\7q\2\2|}\7k\2\2}~\7f\2\2~\f\3\2\2\2\177")
        buf.write("\u0080\7x\2\2\u0080\u0081\7c\2\2\u0081\u0082\7t\2\2\u0082")
        buf.write("\16\3\2\2\2\u0083\u0084\7e\2\2\u0084\u0085\7n\2\2\u0085")
        buf.write("\u0086\7c\2\2\u0086\u0087\7u\2\2\u0087\u0088\7u\2\2\u0088")
        buf.write("\20\3\2\2\2\u0089\u008a\7r\2\2\u008a\u008b\7w\2\2\u008b")
        buf.write("\u008c\7d\2\2\u008c\u008d\7n\2\2\u008d\u008e\7k\2\2\u008e")
        buf.write("\u008f\7e\2\2\u008f\22\3\2\2\2\u0090\u0091\7r\2\2\u0091")
        buf.write("\u0092\7t\2\2\u0092\u0093\7k\2\2\u0093\u0094\7x\2\2\u0094")
        buf.write("\u0095\7c\2\2\u0095\u0096\7v\2\2\u0096\u0097\7g\2\2\u0097")
        buf.write("\24\3\2\2\2\u0098\u0099\7y\2\2\u0099\u009a\7j\2\2\u009a")
        buf.write("\u009b\7k\2\2\u009b\u009c\7n\2\2\u009c\u009d\7g\2\2\u009d")
        buf.write("\26\3\2\2\2\u009e\u009f\7h\2\2\u009f\u00a0\7q\2\2\u00a0")
        buf.write("\u00a1\7t\2\2\u00a1\30\3\2\2\2\u00a2\u00a3\7r\2\2\u00a3")
        buf.write("\u00a4\7t\2\2\u00a4\u00a5\7k\2\2\u00a5\u00a6\7p\2\2\u00a6")
        buf.write("\u00a7\7v\2\2\u00a7\32\3\2\2\2\u00a8\u00a9\7k\2\2\u00a9")
        buf.write("\u00aa\7p\2\2\u00aa\u00ab\7r\2\2\u00ab\u00ac\7w\2\2\u00ac")
        buf.write("\u00ad\7v\2\2\u00ad\34\3\2\2\2\u00ae\u00af\7>\2\2\u00af")
        buf.write("\36\3\2\2\2\u00b0\u00b1\7@\2\2\u00b1 \3\2\2\2\u00b2\u00b3")
        buf.write("\7#\2\2\u00b3\u00b4\7?\2\2\u00b4\"\3\2\2\2\u00b5\u00b6")
        buf.write("\7>\2\2\u00b6\u00b7\7?\2\2\u00b7$\3\2\2\2\u00b8\u00b9")
        buf.write("\7@\2\2\u00b9\u00ba\7?\2\2\u00ba&\3\2\2\2\u00bb\u00bc")
        buf.write("\7?\2\2\u00bc\u00bd\7?\2\2\u00bd(\3\2\2\2\u00be\u00bf")
        buf.write("\7(\2\2\u00bf\u00c0\7(\2\2\u00c0*\3\2\2\2\u00c1\u00c2")
        buf.write("\7~\2\2\u00c2\u00c3\7~\2\2\u00c3,\3\2\2\2\u00c4\u00c5")
        buf.write("\7k\2\2\u00c5\u00c6\7h\2\2\u00c6.\3\2\2\2\u00c7\u00c8")
        buf.write("\7g\2\2\u00c8\u00c9\7n\2\2\u00c9\u00ca\7u\2\2\u00ca\u00cb")
        buf.write("\7g\2\2\u00cb\u00cc\7k\2\2\u00cc\u00cd\7h\2\2\u00cd\60")
        buf.write("\3\2\2\2\u00ce\u00cf\7g\2\2\u00cf\u00d0\7n\2\2\u00d0\u00d1")
        buf.write("\7u\2\2\u00d1\u00d2\7g\2\2\u00d2\62\3\2\2\2\u00d3\u00d4")
        buf.write("\7#\2\2\u00d4\64\3\2\2\2\u00d5\u00d6\7k\2\2\u00d6\u00d7")
        buf.write("\7p\2\2\u00d7\u00e2\7v\2\2\u00d8\u00d9\7h\2\2\u00d9\u00da")
        buf.write("\7n\2\2\u00da\u00db\7q\2\2\u00db\u00dc\7c\2\2\u00dc\u00e2")
        buf.write("\7v\2\2\u00dd\u00de\7e\2\2\u00de\u00df\7j\2\2\u00df\u00e0")
        buf.write("\7c\2\2\u00e0\u00e2\7t\2\2\u00e1\u00d5\3\2\2\2\u00e1\u00d8")
        buf.write("\3\2\2\2\u00e1\u00dd\3\2\2\2\u00e2\66\3\2\2\2\u00e3\u00e7")
        buf.write("\t\2\2\2\u00e4\u00e6\t\3\2\2\u00e5\u00e4\3\2\2\2\u00e6")
        buf.write("\u00e9\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2")
        buf.write("\u00e8\u00ec\3\2\2\2\u00e9\u00e7\3\2\2\2\u00ea\u00ec\t")
        buf.write("\4\2\2\u00eb\u00e3\3\2\2\2\u00eb\u00ea\3\2\2\2\u00ec8")
        buf.write("\3\2\2\2\u00ed\u00ef\t\3\2\2\u00ee\u00ed\3\2\2\2\u00ef")
        buf.write("\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0\u00f1\3\2\2\2")
        buf.write("\u00f1\u00f3\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f3\u00f5\7")
        buf.write("\60\2\2\u00f4\u00f6\t\3\2\2\u00f5\u00f4\3\2\2\2\u00f6")
        buf.write("\u00f7\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2")
        buf.write("\u00f8:\3\2\2\2\u00f9\u00fa\7)\2\2\u00fa\u00fb\13\2\2")
        buf.write("\2\u00fb\u00fc\7)\2\2\u00fc<\3\2\2\2\u00fd\u00fe\7-\2")
        buf.write("\2\u00fe>\3\2\2\2\u00ff\u0100\7/\2\2\u0100@\3\2\2\2\u0101")
        buf.write("\u0102\7,\2\2\u0102B\3\2\2\2\u0103\u0104\7\61\2\2\u0104")
        buf.write("D\3\2\2\2\u0105\u0109\t\5\2\2\u0106\u0107\7>\2\2\u0107")
        buf.write("\u0109\7@\2\2\u0108\u0105\3\2\2\2\u0108\u0106\3\2\2\2")
        buf.write("\u0109F\3\2\2\2\u010a\u010b\7?\2\2\u010bH\3\2\2\2\u010c")
        buf.write("\u010d\7<\2\2\u010dJ\3\2\2\2\u010e\u010f\7]\2\2\u010f")
        buf.write("L\3\2\2\2\u0110\u0111\7_\2\2\u0111N\3\2\2\2\u0112\u0113")
        buf.write("\7*\2\2\u0113P\3\2\2\2\u0114\u0115\7+\2\2\u0115R\3\2\2")
        buf.write("\2\u0116\u0117\7}\2\2\u0117T\3\2\2\2\u0118\u0119\7\177")
        buf.write("\2\2\u0119V\3\2\2\2\u011a\u011b\7\60\2\2\u011bX\3\2\2")
        buf.write("\2\u011c\u011d\7.\2\2\u011dZ\3\2\2\2\u011e\u011f\7=\2")
        buf.write("\2\u011f\\\3\2\2\2\u0120\u0124\t\6\2\2\u0121\u0123\t\7")
        buf.write("\2\2\u0122\u0121\3\2\2\2\u0123\u0126\3\2\2\2\u0124\u0122")
        buf.write("\3\2\2\2\u0124\u0125\3\2\2\2\u0125^\3\2\2\2\u0126\u0124")
        buf.write("\3\2\2\2\u0127\u0129\t\b\2\2\u0128\u0127\3\2\2\2\u0129")
        buf.write("\u012a\3\2\2\2\u012a\u0128\3\2\2\2\u012a\u012b\3\2\2\2")
        buf.write("\u012b\u012c\3\2\2\2\u012c\u012d\b\60\2\2\u012d`\3\2\2")
        buf.write("\2\13\2\u00e1\u00e7\u00eb\u00f0\u00f7\u0108\u0124\u012a")
        buf.write("\3\b\2\2")
        return buf.getvalue()


class PPCDSALVCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    TYPES = 26
    INT = 27
    FLOAT = 28
    CHAR = 29
    MAS = 30
    MENOS = 31
    MULT = 32
    DIV = 33
    CMP = 34
    IGUAL = 35
    PP = 36
    LB = 37
    RB = 38
    PA = 39
    PC = 40
    LLA = 41
    LLC = 42
    PUNTO = 43
    COMA = 44
    PUNTOCOMA = 45
    ID = 46
    IGN = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'main'", "'func'", "'return'", "'void'", "'var'", 
            "'class'", "'public'", "'private'", "'while'", "'for'", "'print'", 
            "'input'", "'<'", "'>'", "'!='", "'<='", "'>='", "'=='", "'&&'", 
            "'||'", "'if'", "'elseif'", "'else'", "'!'", "'+'", "'-'", "'*'", 
            "'/'", "'='", "':'", "'['", "']'", "'('", "')'", "'{'", "'}'", 
            "'.'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "TYPES", "INT", "FLOAT", "CHAR", "MAS", "MENOS", "MULT", "DIV", 
            "CMP", "IGUAL", "PP", "LB", "RB", "PA", "PC", "LLA", "LLC", 
            "PUNTO", "COMA", "PUNTOCOMA", "ID", "IGN" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "TYPES", 
                  "INT", "FLOAT", "CHAR", "MAS", "MENOS", "MULT", "DIV", 
                  "CMP", "IGUAL", "PP", "LB", "RB", "PA", "PC", "LLA", "LLC", 
                  "PUNTO", "COMA", "PUNTOCOMA", "ID", "IGN" ]

    grammarFileName = "PPCDSALVC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


